<?php
/**
 * @file
 * Contains the main functions of Advanced Poll Media module
 */
/**
 * Implements hook_menu()
 */

/**
 * Implements hook_entity_info_alter().
 */
function advpoll_media_entity_info_alter(&$entity_info) {
 $entity_info['file']['view modes'] = array(
      'poll_choice_view' => array(
        'label' => t('Poll Choice Form'),
        'custom settings' => TRUE,
      ),
      'poll_results_view' => array(
        'label' => t('Poll Results'),
        'custom settings' => TRUE,
      ),
    );
}

function advpoll_media_menu() {
  $items = array();
  $items['admin/config/media/advpoll_media'] = array(
    'title' => 'Adavanced Poll Media',
    'description' => 'Configuration for Advanced Poll media module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'advpoll_media_settings_form'
    ) ,
    'access arguments' => array(
      'access administration pages'
    ) ,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'advpoll_media.admin.inc',
  );
  return $items;
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */

function advpoll_media_field_widget_advpoll_write_in_form_alter(&$element, &$form_state, $context) {
  $default_value = advpoll_media_load($element['choice_id']['#default_value']);
  $element['file'] = array(
    '#type' => 'media',
    '#title' => t('Media') ,
    '#default_value' => $default_value,
    '#upload_location' => 'public://advpoll/advpoll-media',
  );
}
/**
 * Implements hook_theme().
 */

function advpoll_media_theme($existing, $type, $theme, $path) {
  return array(
    // Theme image output
    'advpoll_media' => array(
      'variables' => array(
        'fid' => NULL,
        'choice_text' => NULL
      ) ,
    ) ,
    // Override / Add suggestion for advpoll choice form template
    
    // TODO: is this the best way?
    'advpoll_choice_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'advpoll_media') . '/templates',
      'template' => 'advpoll-choice-form',
    ) ,
    // Override / Add suggestion for advpoll bar template
    
    // TODO: is this the best way?
    'advpoll_bar' => array(
      'variables' => array(
        'votes' => 0,
        'voted' => 0,
        'file'  => '',
        'nid'   => NULL,
      ) ,
      'path' => drupal_get_path('module', 'advpoll_media') . '/templates',
      'template' => 'advpoll-bar',
    ) ,
    'advpoll_results' => array(
      'variables' => array(
        'bars' => NULL,
        'labels' => NULL,
        'rows' => NULL,
        'total' => 0,
        'voted' => NULL,
        'nid' => NULL,
        'cancel_form' => NULL
      ) ,
      'path' => drupal_get_path('module', 'advpoll_media') . '/templates',
      'template' => 'advpoll-results',
    ) ,
  );
}
/**
 * Return image html.
 */

function theme_advpoll_media($variables) {
  $fid = $variables['fid'];
  $choice_text = isset($variables['choice_text']) ? $variables['choice_text'] : '';
  $file = file_load($fid);
  
  if (!$fid) {
    return '';
  }
  else{
	  $view = file_view_file($file,$variables['view']);
	  return render($view);
  }
}
/**
 * Implements hook_node_update().
 */

function advpoll_media_node_update($node) {
  
  if ($node->type == 'advpoll') {
    advpoll_media_choices_save($node);
  }
}
/**
 * Implements hook_node_insert().
 */

function advpoll_media_node_insert($node) {
  
  if ($node->type == 'advpoll') {
    advpoll_media_choices_save($node);
  }
}
/**
 * Save choices images.
 */

function advpoll_media_choices_save($node) {
  $lang = advpoll_media_get_choices_lang($node);
  $new_images = array();
  
  foreach ($node->advpoll_choice[$lang] as $choice) {
    
    if ($choice['file']) {
      $new_images[$choice['choice_id']] = $choice['file'];
    }
  }
  $old_images = array();
  
  if (isset($node->original)) {
    
    foreach ($node->original->advpoll_choice[$lang] as $choice) {
      
      if ($choice['file']) {
        $old_images[$choice['choice_id']] = $choice['file'];
      }
    }
  }
  // Delete images, that existed in the old node, but do not exist in the new node
  
  foreach ($old_images as $choice_id => $image) {
    
    if (!isset($new_images[$choice_id])) {
      advpoll_media_delete($choice_id);
    }
  }
  
  foreach ($new_images as $choice_id => $image) {
    // Delete images, that has changed in the new node
    
    if (isset($old_images[$choice_id]) && $old_images[$choice_id] != $image) {
      advpoll_media_delete($choice_id);
    }
    // Add images, which were not in the old node
    
    if (!isset($old_images[$choice_id])) {
      advpoll_media_add($node->nid, $choice_id, $image);
    }
  }
}
/**
 * Implements hook_node_delete().
 */

function advpoll_media_node_delete($node) {
  
  if ($node->type == 'advpoll') {
    $lang = advpoll_media_get_choices_lang($node);
    
    foreach ($node->advpoll_choice[$lang] as $choice) {
      advpoll_media_delete($choice['choice_id']);
    }
  }
}
/**
 * Implements hook_field_attach_load().
 */

function advpoll_media_field_attach_load($entity_type, $entities, $age, $options) {
  
  if ($entity_type == 'node') {
    // Find choice ids
    $choice_ids = array();
    
    foreach ($entities as $node) {
      
      if ($node->type == 'advpoll') {
        $lang = advpoll_media_get_choices_lang($node);
        
        foreach ($node->advpoll_choice[$lang] as $choice) {
          $choice_ids[] = $choice['choice_id'];
        }
      }
    }
    // Add data to nodes
    
    if ($choice_ids) {
      $images = advpoll_media_load_multiple($choice_ids);
      
      foreach ($entities as & $node) {
        
        if ($node->type == 'advpoll') {
          $lang = advpoll_media_get_choices_lang($node);
          
          foreach ($node->advpoll_choice[$lang] as & $choice) {
            $choice['file'] = isset($images[$choice['choice_id']]) ? $images[$choice['choice_id']] : 0;
          }
        }
      }
    }
  }
}
/**
 * Return choices language.
 */

function advpoll_media_get_choices_lang($node) {
  $lang = $node->language;
  
  if (!isset($node->advpoll_choice[$lang])) {
    $lang = 'und';
  }
  return $lang;
}
/**
 * Return image fid by choice id.
 */

function advpoll_media_load($choice_id) {
  return db_select('advpoll_choice_media', 'aci')->fields('aci', array(
    'fid'
  ))->condition('choice_id', $choice_id)->execute()->fetchField();
}
/**
 * Return the text of choice id
 */

function advpoll_media_choice_text($choice_id) {
  return db_select('field_data_advpoll_choice', 'aci')->fields('aci', array(
    'advpoll_choice_choice'
  ))->condition('advpoll_choice_choice_id', $choice_id)->execute()->fetchField();
}
/**
 * Return images by choice ids
 */

function advpoll_media_load_multiple($choice_ids) {
  return db_select('advpoll_choice_media', 'aci')->fields('aci', array(
    'choice_id',
    'fid'
  ))->condition('choice_id', $choice_ids, 'IN')->execute()->fetchAllKeyed();
}
/**
 * Delete image file and relation by choice id.
 */

function advpoll_media_delete($choice_id) {
  $image = advpoll_media_load($choice_id);
  
  if ($image) {
    // Delete file
    $file = file_load($image);
    file_usage_delete($file, 'advpoll_media');
    file_delete($file);
    // Delete relation
    db_delete('advpoll_choice_media')->condition('choice_id', $choice_id)->execute();
  }
}
/**
 * Change file status and add relation.
 */

function advpoll_media_add($nid, $choice_id, $image) {
  
  if (!$image || !$choice_id) {
    return FALSE;
  }
  db_insert('advpoll_choice_media')->fields(array(
    'choice_id' => $choice_id,
    'fid' => $image,
  ))->execute();
  $file = file_load($image);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  file_usage_add($file, 'advpoll_media', 'node', $nid);
}
/**
 * Implements hook_form_FORM_ID_alter().
 */

function advpoll_media_form_advpoll_choice_form_alter(&$form, &$form_state, $form_id) {
  // Add choice images to form, designed to be accessed and themed at the template level.
  
  // Image keys correspond to choice keys.
  
  // Get images for this poll
  $node = $form_state['build_info']['args'][0];
  $lang = advpoll_media_get_choices_lang($node);
  $media = array();
  
  foreach ($node->advpoll_choice[$lang] as $choice) {
    
    if ($choice['file']) {
      $media[$choice['choice']] = $choice['file'];
    }
  }
  // Return if we don't have any images set
  
  if (empty($media)) {
    return;
  }
  // Alter form
  foreach (element_children($form) as $key) {
    
    if ($form[$key]['#type'] == 'radios' || $form[$key]['#type'] == 'checkboxes') {
      
      foreach ($form[$key]['#options'] as $option_value => & $option_text) {
        
        if (isset($media[$option_value])) {
          
          if ($option_value != 'write-in') {
            $form['media'][$option_value]['#markup'] = 
            theme_advpoll_media (array('fid' => $media[$option_value], 'choice_text' => $option_text, 'view' => 'poll_choice_view'));
          }
        }
      }
    }
  }
  return $form;
}
/**
 * Assign the elements of the form to variables so
 * the themer can use those values to control how the
 * form elements are displayed, or alternatively
 * displaying the whole form as constructed above.
 * @see Pro Drupal Development
 */

function template_preprocess_advpoll_choice_form(&$variables) {
  $hidden = array();
  // Provide variables named after form keys so themers can print each element independently.
  foreach (element_children($variables['form']) as $key) {
    $type = isset($variables['form'][$key]['#type']) ? $variables['form'][$key]['#type'] : '';    
    $new_key = $key;
    if ($type == 'radios' || $type == 'checkboxes') {
      $new_key = 'choices';
    }    
    if ($type == 'hidden' || $type == 'token') {
      $hidden[] = drupal_render($variables['form'][$key]);
    }
    elseif (element_children($variables['form'][$key])) {
      foreach (element_children($variables['form'][$key]) as $child_key) {
        $variables[$new_key][$child_key] = drupal_render($variables['form'][$key][$child_key]);
      }
    }
    else {
      $variables[$new_key] = drupal_render($variables['form'][$key]);
    }
  }
  // Hidden form elements have no value to themers. No need for separation.
  $variables['hidden'] = implode($hidden);
}
/**
 * Preprocess function for advpoll-bar.tpl.php
 */

function advpoll_media_preprocess_advpoll_bar(&$vars) {
  // Ideally, theme_advpoll_bar() would be passed $nid and $choice_id, which would
  // allow us to get and pass the proper image directly here, rather than this placeholder hash.
  $vars['image_placeholder'] = '<!-- advpoll-image-' . md5($vars['title']) . ' -->';
}
/**
 * Preprocess function for advpoll-results.tpl.php
 */

function advpoll_media_preprocess_advpoll_results(&$vars) {
  $node = node_load($vars['nid']);
  $lang = advpoll_media_get_choices_lang($node);
  foreach ($node->advpoll_choice[$lang] as $delta => $choice) {
	  if (!empty($choice['file'])){
     $vars['bars'] = str_replace(
      '<!-- advpoll-image-' . md5($choice['choice']) . ' -->',
      theme_advpoll_media (array('fid' => $choice['file'], 'choice_text' => $choice['choice'], 'view' => 'poll_results_view')),
      $vars['bars']
    );
	  }
  }
}
